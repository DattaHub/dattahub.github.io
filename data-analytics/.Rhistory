string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "goru"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadhardol"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "bokagadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadhata"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "tata"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "modi"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "boka"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "bokachoda"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "devil"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "khuni"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "killer"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "stupid"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "silly"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "joke"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "joke"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "modi"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
sessionInfo()
?rchisq
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
chisq.sim.1 <- replicate(100, crossprod(rnorm(10)))
hist(chisq.sim.1)
hist(chisq.sim.1)
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
hist(chisq.sim.1)
?crossprod
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1)
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1, add = T)
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1, add = T)
?hist
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
p1 <- hist(chisq.sim.1, plot = F)
chisq.sim.2 <- rchisq(1000, df = 10)
p2 <- hist(chisq.sim.2, plot = F)
plot(p1); plot(p2, , col = rgb(1,0,0,0.5), add = T)
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
p1 <- hist(chisq.sim.1, plot = F)
chisq.sim.2 <- rchisq(1000, df = 10)
p2 <- hist(chisq.sim.2, plot = F)
plot(p1,col = rgb(0,0,1,0.5)); plot(p2, , col = rgb(1,0,0,0.5), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim.2), freq = F)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim.2, freq = F)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(df=10), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(x,df=10), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(x,df=5), add = T)
chisq.sim = NULL
for(i in 1:1000){
}
chisq.sim = NULL
for(i in 1:1000){
chisq.sim <- c(chisq.sim, crossprod(rnorm(5))
}
chisq.sim <- c(chisq.sim, crossprod(rnorm(5))
}
for(i in 1:1000){
}
crossprod(rnorm(5)
)
chisq.sim = NULL
for(i in 1:1000){
chisq.sim = c(chisq.sim, crossprod(rnorm(5)))
}
plot(hist(chisq.sim, freq = F))
curve(dchisq(x, df = 5))
plot(hist(chisq.sim, freq = F))
curve(dchisq(x, df = 5), add = T)
plot(hist(chisq.sim, freq = T))
curve(dchisq(x, df = 5), add = T)
p <- hist(chisq.sim, freq = F)
plot(p)
curve(dchisq(x, df = 5), add = T)
p <- hist(chisq.sim, freq = T)
plot(p)
curve(dchisq(x, df = 5), add = T)
chisq.sim = NULL
for(i in 1:1000){
x <- rnorm(5)
chisq.sim = c(chisq.sim, sum(x*x))
}
p <- hist(chisq.sim, freq = T)
p <- hist(chisq.sim, freq = F)
plot(p)
hist(chisq.sim, freq = F)
curve(dchisq(x, df = 5), add = T)
## one sample versus mu=0
y <- rnorm(20, mean = 3, sd = 2)
ybar <- mean(y)
s2 <- var(y)
n <- length(y)
mu <- 0 ## repeat with mu = mean(IndustryROE)
N <- 100000
sigma2 <- (n-1)*s2 / rchisq(N, n-1)
ybars <- rnorm(N, mu, sqrt(sigma2/n))
hist(ybars)
abline(v=ybar)
## one sample versus mu=0
y <- rnorm(20, mean = 0, sd = 2)
ybar <- mean(y)
s2 <- var(y)
n <- length(y)
mu <- 0
N <- 100000
sigma2 <- (n-1)*s2 / rchisq(N, n-1)
ybars <- rnorm(N, mu, sqrt(sigma2/n))
hist(ybars)
abline(v=ybar)
?var.test
library(MVA) # library for bvbox
install.packages("MVA")
extreme <- c( "DC", "HI", "CA") # Three extreme states
exst <- match(extreme, rownames(housing)) # identify index in data
bvbox(housing, xlab = "Apartment", ylab = "House",
pch = 19, cex = 1.25, col = "red")
text(housing$Apartment[exst], housing$House[exst],
labels = extreme, cex = .8, # label names, small font
pos = c(2,2,3)) # position labels: L,L, top
attach(housing)
??housing
housing
library(datasets)
swiss
bvbox(swiss$Agriculture, swiss$Examination)
library(MVA)
bvbox(swiss$Agriculture, swiss$Examination)
?bvbox
bvbox(swiss[, c("Agriculture", "Examination")]
)
bvbox(swiss[, c("Agriculture", "Examination")],
xlab = "Agriculture", ylab = "Examination",
pch = 19, cex = 1.25, col = "red")
swiss2 <- swiss[, c("Agriculture", "Examination")]
bvbox(swiss2,
xlab = "Agriculture", ylab = "Examination",
pch = 19, cex = 1.25, col = "red")
ch <- chull(swiss2) # find the indices of the convex hull
ch <- c(ch,ch[1]) # loop back to the beginning
plot(swiss2, pch = 19, col = 2,
cex = 1.25) # plot the original data
ch <- chull(swiss2) # find the indices of the convex hull
ch <- c(ch,ch[1]) # loop back to the beginning
plot(swiss2, pch = 19, col = 2,
cex = 1.25) # plot the original data
lines(swiss2$Agriculture[ch], swiss2$Examination[ch],
type = "l", col = 3, lwd = 2) # bold, green lines
library(aplpack)
install.packages("aplpack")
library(aplpack)
nlev <- 5 # Number of levels
colors <- heat.colors(9)[3:(nlev+2)]
plothulls(housing, n.hull = nlev, col.hull = colors,
xlab = "Apartment", ylab = "House",
lty.hull = 1:nlev, density = NA, col = 0, main = " ")
library(aplpack)
nlev <- 5 # Number of levels
colors <- heat.colors(9)[3:(nlev+2)]
plothulls(swiss2, n.hull = nlev, col.hull = colors,
xlab = "Agriculture", ylab = "Examination",
lty.hull = 1:nlev, density = NA, col = 0, main = " ")
points(swiss2, pch = 16, cex = 1, col = "blue")
library(aplpack)
nlev <- 5 # Number of levels
colors <- heat.colors(9)[3:(nlev+2)]
plothulls(swiss2, n.hull = nlev, col.hull = colors, xlab = "Agriculture", ylab = "Examination",lty.hull = 1:nlev, density = NA, col = 0, main = " ")
points(swiss2, pch = 16, cex = 1, col = "blue")
library(aplpack)
nlev <- 5 # Number of levels
colors <- heat.colors(9)[3:(nlev+2)]
plothulls(swiss2, n.hull = nlev, col.hull = colors,
xlab = "Agriculture", ylab = "Examination",
lty.hull = 1:nlev, density = NA, col = 0, main = " ")
points(swiss2, pch = 16, cex = 1, col = "blue")
# Load necessary libraries
library(mvtnorm)
library(graphics)
# Define grid for x and y
x <- seq(-3, 3, length.out = 100)
y <- seq(-3, 3, length.out = 100)
grid <- expand.grid(x = x, y = y)
# Function to compute density matrix for given correlation
get_density_matrix <- function(rho) {
sigma <- matrix(c(1, rho, rho, 1), nrow = 2)  # Covariance matrix
dmvnorm(grid, mean = c(0, 0), sigma = sigma)
}
# Compute density matrices for different correlations
densities <- list(
"-0.8" = matrix(get_density_matrix(-0.8), nrow = length(x)),
"0" = matrix(get_density_matrix(0), nrow = length(x)),
"0.8" = matrix(get_density_matrix(0.8), nrow = length(x))
)
# Set up plotting area
par(mfrow = c(1, 3))
# Generate contour plots
for (rho in names(densities)) {
contour(x, y, densities[[rho]], main = paste("ρ =", rho), xlab = "X", ylab = "Y")
}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# library
library(ggplot2)
library(ggExtra)
install.packages("ggExtra")
library(MASS)  # For mvrnorm()
# Define parameters
set.seed(123)  # For reproducibility
n <- 500  # Number of samples
rho <- 0.9  # Correlation
mu <- c(0, 0)  # Mean vector
sigma <- matrix(c(1, rho, rho, 1), nrow = 2)  # Covariance matrix
# Generate samples using rmvnorm()
samples <- rmvnorm(n, mean = mu, sigma = sigma)
library(ggplot2)
df <- data.frame(x = samples[,1], y = samples[,2])
(p <- ggplot(df, aes(x = x, y = y)) +
geom_point(alpha = 0.5, color = "blue")+
theme_minimal())
library(ggExtra)
# with marginal histogram
p1 <- ggMarginal(p, type="histogram")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.align = 'center')
checker <- function(n) # generates n pairs of
marginal normals
checker <- function(n)
# not bivariate normal
{
checker <- NULL # start a list
for (i in 1:n)
{
x <- rnorm(2) # pair of independent
normals
if(x[1]>0) x[2] <- abs(x[2])
else x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
return(checker)
}
checker <- function(n)
# not bivariate normal
{
checker <- NULL # start a list
for (i in 1:n)
{
x <- rnorm(2) # pair of independent
normals
if(x[1]>0) x[2] <- abs(x[2])
else x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
return(checker)
}
checker_samples <- checker(n = 200)
checker <- function(n)
# not bivariate normal
{
checker <- NULL # start a list
for (i in 1:n)
{
x <- rnorm(2) # pair of independent
normals
if(x[1]>0) x[2] <- abs(x[2])
else x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
return(checker)
}
checker_samples <- checker(200)
checker <- function(n)
# not bivariate normal
{
checker <- NULL # start a list
for (i in 1:n)
{
x <- rnorm(2)
if(x[1]>0) x[2] <- abs(x[2])
else x[2] <- -abs(x[2])
checker <- rbind(checker, x)
}
return(checker)
}
checker_samples <- checker(200)
library(ggplot2)
df <- data.frame(x = checker_samples[,1], y = checker_samples[,2])
p <- ggplot(df, aes(x = x, y = y)) +
geom_point(alpha = 0.5, color = "blue")+
theme_minimal()
(p1 <- ggMarginal(p, type="histogram"))
